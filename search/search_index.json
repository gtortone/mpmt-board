{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The multi PhotoMultiplier (mPMT) board is a mainboard that will be used for HyperK experiment in Japan.</p> <p>mPMT board includes several submodules and provides two embedded Linux boards:</p> <ul> <li> <p>a supervisor (SAMA) based on ATSAMA5D27 processor.</p> </li> <li> <p>a Zynq 7000 SoC that integrates the software programmability of an Arm-based processor with the hardware programmability of an FPGA dedicated for acquisition and slow control tasks.</p> </li> </ul> <p>The main purpose of this documentation is to offer a guide to bring-up these two Linux systems (SAMA and Zynq).</p>"},{"location":"deployment-server/","title":"Deployment server","text":""},{"location":"deployment-server/#introduction","title":"Introduction","text":"<p>A deployment server is required to serve useful files on network in order to bring-up mPMT board.  These files will be available on network using TFTP and HTTP protocols.</p>"},{"location":"deployment-server/#architecture","title":"Architecture","text":"<p>The deployment server can also be used for NAT so it can map mPMT board private addresses to a single public IP address. It can be also used for DHCP and DNS services.</p> <pre><code>graph LR\n  subgraph hosts[\"private IP LAN\"]\n    A[mPMT board #1]\n    C[mPMT board #2]\n  end\n  A[mPMT board #1] &lt;--&gt; B[Deployment Server];\n  C[mPMT board #2] &lt;--&gt; B[Deployment Server];\n  B[Deployment Server] &lt;--&gt; D[Internet]</code></pre>"},{"location":"deployment-server/#tftp-server-setup","title":"TFTP server setup","text":"<p>A quick and simple option to install and configure a TFTP server is dnsmasq. Dnsmasq provides network infrastructure for small networks: DNS, DHCP and TFTP.</p> <p>Dnsmasq has a single configuration file where user can set home directory of TFTP and DHCP server options.</p> <p>In this configuration file example dnsmasq runs DHCP and TFTP server. TFTP server has <code>/srv/tftp</code> as home  directory for files while DHCP server is configured to refuse MAC addresses not defined as static leases. DHCP server is also configured to provide DNS server and default gateway to clients.</p> <pre><code># only operate on eth0\ninterface=eth0\n\n# set default gateway\ndhcp-option=3,10.1.1.254\n\n# set default DNS server\ndhcp-option=6,10.1.3.3\n\n# activate DHCP server with IP range\ndhcp-range=10.1.1.31,10.1.1.38,255.255.0.0,6h\n\n# ignore unknown clients\ndhcp-ignore=tag:!known\n\n# set static leases\ndhcp-host=00:04:a3:48:bb:85,zynq,10.1.1.34,infinite\ndhcp-host=80:34:28:28:52:BA,sama,10.1.1.35,infinite\n\n# enable TFTP server\nenable-tftp\ntftp-root=/srv/tftp\n</code></pre>"},{"location":"deployment-server/#http-server-setup","title":"HTTP server setup","text":"<p>HTTP protocol is used on deployment server to provide a reliable network channel for data transfer. TFTP is based on UDP and is suitable for small data transfer, on the other side HTTP is based on TCP and is reliable for big data transfer like root file system images that can reach gigabytes in size.</p> <p>A very simple and reliable HTTP server is http-server, it is a node.js application and its installation is provided with npm or npx tool.</p> <p>Usage is quite intuitive because it runs by default on port 8080 and accept as first parameter the home directory to serve on HTTP.</p>"},{"location":"deployment-server/#directories-organization","title":"Directories organization","text":"<p>Note</p> <p>In order to effectively manage boot files it is recommended to configure both HTTP server and TFTP server  on same home directory (e.g. <code>/srv/tftp</code>).</p> <p>Assuming that defined home directory is <code>/srv/tftp</code> for both TFTP and HTTP servers, mPMT board setup scripts follow this directories schema to fetch files (each item is a directory):</p> <pre><code>/mpmt\n\n    /sama\n\n    /zynq\n\n        /rfs-images\n\n        /&lt;MAC address&gt;\n\n        /default/plain\n\n        /default/led\n\n        /default\n</code></pre> <ul> <li> <p>The first directory <code>/mpmt</code> is the base for all mPMT board files so you can use same deployment server to  handle boot files for other boards.</p> </li> <li> <p><code>/mpmt/sama</code> and <code>/mpmt/zynq</code> contains boot files and/or configuration files respectively for SAMA (SAMA5D27) or for Zynq 7000 SoC.</p> </li> <li> <p><code>/mpmt/zynq/rfs-images</code> contains Linux root file system compressed files for Zynq 7000 SoC.</p> </li> <li> <p><code>/mpmt/zynq/&lt;MAC address&gt;</code> can contains boot files or configuration files related to a specific Zynq identified by its network adapter MAC address. MAC address must have following format: <code>00-11-22-33-44-55</code> using dash character instead of colon character. </p> </li> <li> <p><code>/mpmt/zynq/default/plain</code> and <code>/mpmt/zynq/default/led</code> contains FPGA bitstream for standard mPMT board (plain) or 'led equipped' mPMT board (led).</p> </li> <li> <p><code>/mpmt/zynq/default</code> contains boot files and/or configuration files common to all mPMT board types.</p> </li> </ul>"},{"location":"deployment-server/#configuration","title":"Configuration","text":"<p>While SAMA installation is done using SAM-BA tool, Zynq installation is a quite complex task and it requires a properly configuration of deployment server.</p> <p>All required files to copy on deployment server directories are available on mPMT board  release page.</p> <p>Note</p> <p>For the sake of simplicity also SAMA boot files are included in deployment server directories, but they are not fetched by network during SAMA installation.</p> <p>Release files must be copied using following schema respecting path and names:</p> release file deployment file description at91bootstrap.bin <code>/mpmt/sama/at91bootstrap.bin</code> SAMA first stage bootloader at91-sama5d27-u-boot.bin <code>/mpmt/sama/u-boot.bin</code> SAMA U-Boot at91-sama5d27_som1_ek.dtb <code>/mpmt/sama/at91-sama5d27_som1_ek.dtb</code> SAMA device tree at91-sama5d27-zImage <code>/mpmt/sama/zImage</code> SAMA Linux kernel image at91-sama5d27-rootfs.wic <code>/mpmt/sama/at91-sama5d27-rootfs.wic</code> SAMA root filesystem image BOOT.BIN <code>/mpmt/zynq/default/BOOT.BIN</code> Zynq FPGA bitstream, FSBL and U-Boot image.ub <code>/mpmt/zynq/default/image.ub</code> Zynq Linux kernel, device tree and minimal rootfs zynq-mpmt-debian.tar.lz4 <code>/mpmt/zynq/rfs-images/zynq-mpmt-debian.tar.lz4</code> Zynq Linux root filesystem image <p>Warning</p> <p>This initial configuration of deployment server does not take into account different FPGA bitstream (led / plain) as at time of writing this guide they are still in development. It also does not take into account mPMT board customization using MAC address.</p>"},{"location":"hardware/","title":"Hardware specification","text":""},{"location":"hardware/#sama","title":"SAMA","text":"<ul> <li>ARM Cortex-A5 Processor-based SAMA5D27 MPU</li> <li>128MB DDR2 SDRAM</li> <li>8MB Serial Quad I/O Flash Memory (SST26VF064BT-104I/MF)</li> <li>256 bytes Serial EEPROM with EUI-48 Node Identity (24AA02E48T-I/OT)</li> <li>10Base-T/100Base-TX Ethernet PHY (KSZ8081RNAIA)</li> <li>103 I/Os</li> <li>1 USB Device, 1 USB Host and 1 HSIC Interface</li> </ul>"},{"location":"hardware/#zynq-7000","title":"Zynq 7000","text":"<ul> <li>ARMv7 Processor single core</li> <li>512MB RAM</li> <li>32MB Serial Quad I/O Flash Memory</li> <li>8GB eMMC</li> <li>10Base-T/100Base-TX Ethernet</li> </ul>"},{"location":"hardware/#on-board-connectors","title":"On-board connectors","text":"Name Description <code>JDEB1</code> UART0 from ATSAMA5D27 <code>JSAMA1</code> USB connection for SAM-BA programmer/debugger"},{"location":"hardware/#on-board-jumpers","title":"On-board jumpers","text":"Name Description 1-2 closed 2-3 closed <code>JT2</code> Zynq boot mode JTAG boot QSPI boot <code>JT3</code> SAMA eMMC enable external eMMC enabled external eMMC disabled <code>JT4</code> QSPI boot enable QSPI boot enabled QSPI boot disabled"},{"location":"hardware/#communication-bus","title":"Communication bus","text":"<pre><code>graph LR\n  A[SAMA] &lt;--&gt; |USB| B[FTDI];\n  B &lt;--&gt; |FIFO| C[Zynq];\n  B &lt;--&gt; |JTAG| C;\n  A &lt;--&gt; |UART| C;\n  A &lt;--&gt; |UART| C;</code></pre>"},{"location":"hardware/#jtag","title":"JTAG","text":"<p>SAMA is JTAG master and Zynq is a JTAG target using FTDI USB controller.</p>"},{"location":"hardware/#uart","title":"UART","text":"<p>Two different UART are available between SAMA and Zynq. They makes available Linux login console from Zynq to SAMA and from SAMA to Zynq.</p>"},{"location":"hardware/#fifo","title":"FIFO","text":"<p>A FIFO interface is available between Zynq and FTDI to offer a backup solution for data acquisition where Zynq can fill FTDI FIFO and SAMA can fetch data using USB protocol.</p>"},{"location":"sama-bringup/","title":"SAMA bring-up","text":""},{"location":"sama-bringup/#introduction","title":"Introduction","text":"<p>To bring-up SAMA with a Linux operating system user will run SAM-BA to write bootloader on QSPI flash and Linux root filesystem on external eMMC. At the end of bring-up process the default boot order will be redefined to configure SAMA to boot always from external eMMC.</p>"},{"location":"sama-bringup/#sam-ba","title":"SAM-BA","text":"<p>SAM-BA tool is required to properly bring-up SAMA. SAM-BA software provides an open set of tools for in-system programming of internal and external memories connected to 32bit MCUs and MPUs.</p> <p>SAM-BA is available on Microchip website.</p> <p>Note</p> <p>SAM-BA can be used only if SAMA is in \"SAM-BA mode\", in this case SAM-BA tool can interact with board using JSAMA1 micro-USB connector.</p> <p>Some useful SAM-BA commands to inspect SAMA configuration:</p> get current boot configuration<pre><code>sam-ba -x ./examples/sama5d2/boot-config/show-boot-config.qml\n</code></pre> get current fuses configuration<pre><code>sam-ba -x ./examples/sama5d2/fuse/sama5d2-fuse.qml\n</code></pre>"},{"location":"sama-bringup/#boot-order","title":"Boot order","text":"<p>SAMA boot order is handled by 4 registers:</p> <ul> <li>BUREG0</li> <li>BUREG1</li> <li>BUREG2</li> <li>BUREG3</li> </ul> <p>Register <code>BSCR</code> contains the index of <code>BUREG</code> register to apply while <code>FUSE#16</code> contains permanent boot order.</p> <p>Default value of <code>FUSE#16</code> set QSPI flash as first boot device, this will be changed at the end of SAMA bring-up process.</p>"},{"location":"sama-bringup/#hardware-preparation","title":"Hardware preparation","text":"<p>Warning</p> <p>Be sure to follow these steps before start bring-up process otherwise SAM-BA tool will not communicate with SAMA board.</p> <ol> <li>connect USB cable on JSAMA1 connector</li> <li>move JT3 jumper to position 1-2 (external eMMC enabled)</li> <li>move JT4 jumper to position 2-3 (QSPI disabled)</li> <li>power-on board</li> <li>move JT4 jumper to position 1-2 (QSPI enabled)</li> </ol> <p>After last step SAM-BA bootloader is listening for commands.</p>"},{"location":"sama-bringup/#qspi-setup","title":"QSPI setup","text":"<p>Required files available from latest mpmt-board release:</p> <ul> <li>at91bootstrap.bin</li> <li>u-boot.bin</li> </ul>"},{"location":"sama-bringup/#installation-steps","title":"Installation steps","text":"erase QSPI flash<pre><code>sam-ba -p usb -b sama5d27-som1-ek -a qspiflash -c erase\n</code></pre> write AT91bootstrap<pre><code>sam-ba -p usb -b sama5d27-som1-ek -a qspiflash -c writeboot:at91bootstrap.bin -c verifyboot:at91bootstrap.bin\n</code></pre> write U-Boot<pre><code>sam-ba -p usb -b sama5d27-som1-ek -a qspiflash -c write:u-boot.bin:0x00040000 -c verify:u-boot.bin:0x00040000\n</code></pre>"},{"location":"sama-bringup/#emmc-setup","title":"eMMC setup","text":"<p>Required rootfs file is available from latest mpmt-board release:</p> <ul> <li>at91-sama5d27-rootfs.wic</li> </ul>"},{"location":"sama-bringup/#installation-steps_1","title":"Installation steps","text":"write Linux root filesystem<pre><code>sam-ba -p usb -b sama5d27-som1-ek -a sdmmc -c write:at91-sama5d27-rootfs.wic\n</code></pre>"},{"location":"sama-bringup/#permanent-write-of-boot-order","title":"Permanent write of boot order","text":"<p>After QSPI setup and eMMC setup set QSPI flash as first boot device writing <code>FUSE#16</code></p> <pre><code>sam-ba -p usb -b sama5d27-som1-ek -a bootconfig -c writecfg:fuse:0x00460ff7\n</code></pre>"},{"location":"sama-bringup/#post-installation-steps","title":"Post-installation steps","text":"<p>After QSPI and eMMC setup it is possible to use JDEB1 header to connect a USB-UART adapter to view whole Linux boot process. At the end of boot a Linux login prompt is also provided on same UART.</p>"},{"location":"sama-bringup/#applications","title":"Applications","text":""},{"location":"sama-bringup/#control-commands","title":"Control commands","text":""},{"location":"sama-bringup/#ftdi","title":"ftdi","text":"<ul> <li><code>ftdi 0</code>: disable FTDI controller</li> <li><code>ftdi 1</code>: enable FTDI controller</li> </ul>"},{"location":"sama-bringup/#jtag","title":"jtag","text":"<ul> <li><code>jtag 0</code>: disable JTAG transceiver</li> <li><code>jtag 1</code>: enable JTAG transceiver</li> </ul>"},{"location":"sama-bringup/#fpga","title":"fpga","text":"<ul> <li><code>fpga r</code>: reset FPGA</li> </ul>"},{"location":"sama-bringup/#xc3sprog-fpga-programming-from-sama","title":"xc3sprog: FPGA programming from SAMA","text":"<p>Using JTAG bus it is possible to reprogram FPGA using <code>xc3sprog</code> on SAMA.</p> <p>xc3sprog is a suite of utilities for programming Xilinx FPGAs, CPLDs, and EEPROMs with the Xilinx Parallel Cable and other JTAG adapters under Linux.</p> <p>Note</p> <p>In order to use JTAG tools enable FTDI adapter and JTAG bus using these commands: <pre><code>ftdi 1\njtag 1\n</code></pre></p> JTAG boundary scan<pre><code>xc3sprog -c ftdi\n</code></pre> program bitstream (.bit)<pre><code>xc3sprog -c ftdi file.bit -p 1 -v\n</code></pre> program bitstream (.bin)<pre><code>xc3sprog -c ftdi file.bin:w:w:0:BIN -p 1 -v\n</code></pre>"},{"location":"sama-bringup/#xvc-adaptive-xilinx-virtual-cable","title":"xvc-adaptive: Xilinx Virtual Cable","text":"<p>xvc-adaptive is a Xilinx Virtual Cable (XVC) daemon with calibration features to compensate TDO propagation delay on long cables. It can also be used as general XVC service on embedded devices.</p> start XVC server<pre><code>xvcServer --driver FTDI --cfreq 15000000 --interface 2\n</code></pre> <p>Note</p> <p>The alias <code>start_xvc</code> is also available as helper to start xvc-adaptive with default parameters.</p>"},{"location":"sama-bringup/#advanced-options","title":"Advanced options","text":""},{"location":"sama-bringup/#network-operating-system-boot","title":"Network operating system boot","text":"<p>In order to boot Linux operating system from network some files (device tree, Linux kernel image and minimal root filesystem) are needed. U-Boot can fetch during network boot these files using TFTP protocol, so a deployment server is needed to use this feature.</p> <p>lonnect a USB-UART adapter on JDEB1, open serial console using a terminal emulation software and power-on the board. Interrupt U-Boot autoboot hitting a key after U-Boot banner and start network boot script:</p> <pre><code>run bootnet\n</code></pre> <p>If everything goes fine a Linux login prompt will be displayed on UART console.</p>"},{"location":"sama-bringup/#at91bootstrapu-boot-rescue-in-place-using-deployment-server","title":"AT91bootstrap/U-Boot rescue in place using deployment server","text":"<pre><code>dhcp\n\nsf probe\n\nsf erase 0 0x800000\n\ntftpboot 0x21100000 mpmt/sama/at91bootstrap.bin\nsf write 0x21100000 0 ${filesize}\n\ntftpboot 0x21A00000 mpmt/sama/u-boot.bin\nsf write 0x21A00000 0x00040000 ${filesize}\n</code></pre>"},{"location":"zynq-bringup/","title":"Zynq bring-up","text":""},{"location":"zynq-bringup/#requirements","title":"Requirements","text":"<ul> <li>SAMA up and running</li> <li>Deployment server configured and running</li> </ul>"},{"location":"zynq-bringup/#principle-of-operations","title":"Principle of operations","text":"<p>Installation of Zynq starts from SAMA using openocd JTAG tool to 'inject' U-Boot bootloader binary in Zynq RAM. A set of U-Boot environment variables are also injected with openocd in Zynq RAM and used as parameters for Zynq installation and configuration. Environment variables are passed to Linux operating system using kernel command-line parameters (U-Boot environment variable <code>bootargs</code>).</p>"},{"location":"zynq-bringup/#setup-environment-variables","title":"Setup environment variables","text":"<p>Zynq bring-up scripts are available on SAMA in <code>/opt/jtag-scripts</code> directory. Before starting Zynq bring-up user must set configuration and installation parameters using file <code>/opt/jtag-scripts/uEnv.txt</code>.</p> <p>The following table summarize meaning of <code>uEnv.txt</code> variables:</p> variable description notes <code>bootmode</code> if equal to <code>bootmode</code> U-Boot starts unattended Zynq installation <code>mpmtsn</code> mPMT board serial number mPMT board serial number will be written on QSPI partition mtd:userdata during installation <code>mpmttype</code> mPMT board type (<code>plain</code> or <code>led</code>) mPMT board type will be written on QSPI partition mtd:userdata during installation <code>tasklist</code> a list of scripts automatically executed from Zynq at Linux boot tasks home directory is <code>/opt/setup-scripts</code> <code>tftphost</code> TFTP server hostname if defined overrides <code>serverip</code> received by DHCP option 66 <code>tftphome</code> TFTP server mPMT board home directory if defined overrides default value <code>/mpmt/zynq</code> <code>httphost</code> HTTP server hostname <code>httpport</code> HTTP server port number <code>httphome</code> HTTP server mPMT board home directory <p>Warning</p> <p>Default configuration is provided for <code>tasklist</code> so usually there is no need to change this variable. User must be sure that HTTP and TFTP variables reflect his own deployment server configuration.</p> <p>Info</p> <p>User can also set in uEnv.txt file environment variables related to fixed IP configuration or other U-Boot options. A detailed list of U-Boot environment variables is available here</p>"},{"location":"zynq-bringup/#uenvtxt-example","title":"uEnv.txt example","text":"<pre><code>#\n# bootmode\n#\nbootmode=recovery\n\n#\n# mPMT serial number\n#\nmpmtsn=AABBCCDDEE112233445566\n\n#\n# mPMT type\n#\nmpmttype=plain\n\n#\n# settings for automatic execution at Linux boot\n#\ntasklist=deploy_qspi_userdata,deploy_qspi_bootbin -p http,deploy_qspi_fitimage -p http,deploy_emmc_rootfs -p http -r rfs-images/zynq-mpmt-debian.tar.lz4\n\n#\n# settings for TFTP server\n#\ntftphome=/mpmt/zynq/\n\n#\n# settings for HTTP server\n#\nhttphost=10.1.3.3\nhttpport=8080\nhttphome=/mpmt/zynq\n</code></pre>"},{"location":"zynq-bringup/#start-zynq-bring-up","title":"Start Zynq bring-up","text":"<p>User can monitor whole Zynq bring-up process connecting by SSH to SAMA and opening serial console with <code>minicom</code>:</p> <pre><code>minicom -D /dev/ttyS1\n</code></pre> <p>Using an additional SSH session on SAMA user can start main setup script after uEnv.txt setup:</p> <pre><code>cd /opt/jtag-script\n./boot-zynq\n</code></pre> <p>The script <code>boot-zynq</code> uses openocd to inject U-Boot image and uEnv.txt to Zynq DDR. The whole bring-up process takes around 6 minutes during which status messages are displayed on serial console. QSPI flash and eMMC are partitioned and initialized with files fetched from deployment server using environment passed with uEnv.txt. The Linux login prompt indicates end of bring-up process.</p>"},{"location":"zynq-bringup/#file-fetching-priority","title":"File fetching priority","text":"<p>A file fetching priority mechanism is implemented to customize mPMT board Zynq setup. If a script try to download a file called <code>filename.bin</code> using HTTP protocol and defined <code>httphome</code> directory is <code>/mpmt/zynq</code> the following attempts are made using defined environment variables:</p> <ol> <li><code>http://&lt;httphost&gt;:&lt;httpport&gt;/&lt;httphome&gt;/&lt;mac_address&gt;/filename.bin</code></li> <li><code>http://&lt;httphost&gt;:&lt;httpport&gt;/&lt;httphome&gt;/default/&lt;mpmttype&gt;/filename.bin</code></li> <li><code>http://&lt;httphost&gt;:&lt;httpport&gt;/&lt;httphome&gt;/default/filename.bin</code></li> </ol> <p>Next attempts in list will be skipped at first success.</p>"},{"location":"zynq-bringup/#advanced-options","title":"Advanced options","text":""},{"location":"zynq-bringup/#qspi-memory","title":"QSPI memory","text":""},{"location":"zynq-bringup/#partitioning-schema","title":"Partitioning schema","text":"<p>Zynq SoC is equipped with a 32MByte flash QSPI. During Zynq setup QSPI memory is partitioned following this schema:</p> start addr size name description 0x0000000 7MB mtd:bootbin BOOT.BIN 0x06C0000 26MB mtd:fitimage Linux FIT image: kernel, device tree, minimal root filesystem 0x1FF0000 64KB mtd:userdata mPMT board serial number and mPMT type"},{"location":"zynq-bringup/#zynq-boot-using-qspi-minimal-root-filesystem","title":"Zynq boot using QSPI minimal root filesystem","text":"<p>Linux FIT image available on <code>mtd:fitimage</code> QSPI partition contains Linux kernel, device tree and minimal root filesystem and it can be used from U-Boot to boot Zynq with a minimal root filesystem. To start QSPI boot user can open Zynq serial console from SAMA using minicom, reboot Linux and interrupt U-Boot countdown. After these steps QSPI boot can be launched at U-Boot prompt:</p> <pre><code>run bootqspi\n</code></pre>"},{"location":"zynq-bringup/#manual-qspi-flashing-from-u-boot","title":"Manual QSPI flashing (from U-Boot)","text":"<p>It is possible to flash <code>mtd:bootbin</code> and <code>mtd:fitimage</code> QSPI partitions using U-Boot scripts:</p> <pre><code>run flash_bootbin\nrun flash_fitimage\n</code></pre> <p>The download protocol is fixed as TFTP and environment variable used must be defined using uEnv.txt with openocd or manually. Files will be fetched from deployment server using file fetching priority.</p>"},{"location":"zynq-bringup/#manual-qspi-flashing-from-linux","title":"Manual QSPI flashing (from Linux)","text":"<p>It is possible to manually run setup scripts starting from QSPI boot. Setup scripts are located in <code>/opt/setup-scripts</code>. Setup scripts to initialize QSPI flash partitions (<code>deploy_qspi_bootbin</code>, <code>deploy_qspi_fitimage</code>, <code>deploy_qspi_userdata</code>)  accept following options:</p> <pre><code>-p &lt;protocol&gt;   download protocol {tftp|http}    (mandatory)\n-c &lt;filename&gt;   configuration file               (optional)\n</code></pre> <p>The download protocol can be selected reflecting deployment server configuration, while configuration file contains environment variables as specified for uEnv.txt. Files will be fetched from deployment server using file fetching priority.</p>"},{"location":"zynq-bringup/#emmc-memory","title":"eMMC memory","text":""},{"location":"zynq-bringup/#manual-emmc-flashing","title":"Manual eMMC flashing","text":"<p>Zynq eMMC is partitioned (one Linux partition) and formatted using <code>deploy_emmc_rootfs</code> setup script that accepts following options:</p> <pre><code>-p &lt;protocol&gt;   download protocol {tftp|http}              (mandatory)\n-r &lt;filename&gt;   rootfs file (.tar.gz | .tar.lz4 | .tar)    (mandatory)\n-c &lt;filename&gt;   configuration file                         (optional)\n</code></pre> <p>The download protocol can be selected reflecting deployment server configuration, while configuration file contains environment variables as specified for uEnv.txt. Root filesystem image will be fetched from deployment server using file fetching priority.</p> <p>Note</p> <p>Due to Linux root filesystem image huge size (&gt;1GB) usage of TFTP protocol is highly discouraged because it does not support 'streaming mode' and takes a lot of time to setup whole eMMC. HTTP is preferred and most reliable solution for eMMC flashing.</p>"}]}